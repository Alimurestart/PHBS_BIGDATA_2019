{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Big Data Analysis homework2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=#0099ff size=3 face=\"Èªë‰Ωì\">problem 1-Creating Your First Model</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.Implement a function closed_form_1 that computes this closed form solution given the features ùêó, labels Y (using Python or Matlab)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                   Temp   R-squared:                       0.751\n",
      "Model:                            OLS   Adj. R-squared:                  0.744\n",
      "Method:                 Least Squares   F-statistic:                     103.6\n",
      "Date:                Fri, 27 Dec 2019   Prob (F-statistic):           1.94e-78\n",
      "Time:                        21:44:25   Log-Likelihood:                 280.10\n",
      "No. Observations:                 284   AIC:                            -542.2\n",
      "Df Residuals:                     275   BIC:                            -509.4\n",
      "Df Model:                           8                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       -124.5943     19.887     -6.265      0.000    -163.744     -85.445\n",
      "MEI            0.0642      0.006      9.923      0.000       0.051       0.077\n",
      "CO2            0.0065      0.002      2.826      0.005       0.002       0.011\n",
      "CH4            0.0001      0.001      0.240      0.810      -0.001       0.001\n",
      "N2O           -0.0165      0.009     -1.930      0.055      -0.033       0.000\n",
      "CFC-11        -0.0066      0.002     -4.078      0.000      -0.010      -0.003\n",
      "CFC-12         0.0038      0.001      3.757      0.000       0.002       0.006\n",
      "TSI            0.0931      0.015      6.313      0.000       0.064       0.122\n",
      "Aerosols      -1.5376      0.213     -7.210      0.000      -1.957      -1.118\n",
      "==============================================================================\n",
      "Omnibus:                        8.740   Durbin-Watson:                   0.956\n",
      "Prob(Omnibus):                  0.013   Jarque-Bera (JB):               10.327\n",
      "Skew:                           0.289   Prob(JB):                      0.00572\n",
      "Kurtosis:                       3.733   Cond. No.                     8.53e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 8.53e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\"\n",
    "import os\n",
    "import sys\n",
    "import re\n",
    "import pylab\n",
    "import numpy as np\n",
    "from patsy import dmatrices\n",
    "from scipy import stats\n",
    "from numpy.linalg import inv\n",
    "from numpy import dot\n",
    "from pylab import figure, show, legend\n",
    "from mpl_toolkits.axes_grid1 import host_subplot\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "data=pd.read_csv(\"climate_change_1.csv\")\n",
    "data_train=data[data['Year']<2007]\n",
    "data_test=data[data['Year']>2006] \n",
    "from pandas import DataFrame, Series\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression as lg\n",
    "from sklearn.model_selection import train_test_split\n",
    "examDf=DataFrame(data_train)\n",
    "from scipy.optimize import leastsq\n",
    "testDf=DataFrame(data_test)\n",
    "import math\n",
    "x=DataFrame()\n",
    "for index in examDf.columns:\n",
    "    if index !='Year':\n",
    "        if index !='Month':\n",
    "            if index !='Temp':\n",
    "                x[index]=examDf[index]\n",
    "x_train=np.column_stack((x,np.ones(len(x))))\n",
    "y=examDf.get(\"Temp\")\n",
    "y_train=examDf.get(\"Temp\")\n",
    "y_train=y_train.values\n",
    "import statsmodels.formula.api as smf\n",
    "import statsmodels.api as sm\n",
    "#Âà©Áî®statsmodelsË∑ëÂá∫Êù•ÁöÑÂõûÂΩíÁªìÊûú\n",
    "est=sm.OLS(y, sm.add_constant(x)).fit()\n",
    "\n",
    "print(est.summary())\n",
    "def RMSE(y_true,y_pre):\n",
    "    err=y_true-y_pre\n",
    "    err_sqr=np.dot(np.transpose(err), err)\n",
    "    return math.sqrt(err_sqr/len(err))\n",
    "def closed_form_1(x,y):\n",
    "    m = np.dot(np.transpose(x), x)\n",
    "    n=np.linalg.inv(m)\n",
    "    return np.dot(np.dot(n, np.transpose(x)), y)\n",
    "#Ëá™Â∑±ÊâãÂä®ÂÜôËß£ÊûêÂºè‰ª£Á†ÅË∑ëÂá∫Êù•ÁöÑÂõûÂΩíÁªìÊûú\n",
    "est1=closed_form_1(x_train,y_train)\n",
    "#print(est1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.Write down the mathematical formula for the linear model and evaluate the model R2 on the training set and the testing set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "284\n",
      "RMSE for training data in closed_form_1 = 0.09024652434195392\n",
      "R-square for training data in closed_form_1 = 0.7508932773126747\n",
      "adjusted R-square for training data in closed_form_1 = 0.7427109397061568\n",
      "24\n",
      "RMSE for testing data in closed_form_1 = 0.09538244356355521\n",
      "R-square for testing data in closed_form_1 = 0.22517701571585366\n",
      "adjusted R-square for testing data in closed_form_1 = -0.2729234741810973\n"
     ]
    }
   ],
   "source": [
    "import cmath\n",
    "def computecorrelation(x,y):\n",
    "    x_bar=np.mean(x)\n",
    "    y_bar=np.mean(y)\n",
    "    SSR=0\n",
    "    Varx=0\n",
    "    Vary=0\n",
    "    for i in range(0,len(x)):\n",
    "        SSR+=(x[i]-x_bar)*(y[i]-y_bar)\n",
    "        Varx+=(x[i]-x_bar)**2\n",
    "        Vary+=(y[i]-y_bar)**2\n",
    "    SST=cmath.sqrt(Varx*Vary)\n",
    "    return SSR/SST\n",
    "def adjust_rsquared(x,y,yhat): \n",
    "    ybar=np.mean(y)\n",
    "    ssreg=0\n",
    "    sstot=0\n",
    "    for i in range(0,len(x)):\n",
    "        ssreg+=(yhat[i] -ybar)**2\n",
    "        sstot+=(y[i]- ybar)**2\n",
    "    R_square=ssreg/sstot\n",
    "    print(len(x))\n",
    "    R_adjusted_square=1-(1-R_square)*(len(x)-1)/(len(x)-x.shape[1]-1)\n",
    "    return R_adjusted_square\n",
    "def rsquared(x,y,yhat): \n",
    "    ybar=np.mean(y)\n",
    "    ssreg=0\n",
    "    sstot=0\n",
    "    for i in range(0,len(x)):\n",
    "        ssreg+=(yhat[i] -ybar)**2\n",
    "        sstot+=(y[i]- ybar)**2\n",
    "    return ssreg/sstot\n",
    "\n",
    "y_hat=np.dot(x_train,est1)\n",
    "rsquared_train=rsquared(x_train,y_train,y_hat)\n",
    "rmse_train_1=RMSE(y_train,y_hat)\n",
    "rsquared_train_adjusted=adjust_rsquared(x_train,y_train,y_hat)\n",
    "print('RMSE for training data in closed_form_1 =',rmse_train_1)\n",
    "print('R-square for training data in closed_form_1 =',rsquared_train)\n",
    "print('adjusted R-square for training data in closed_form_1 =',rsquared_train_adjusted)\n",
    "#computing R-square for testing data\n",
    "x_test=DataFrame()\n",
    "for index in testDf.columns:\n",
    "    if index !='Year':\n",
    "        if index !='Month':\n",
    "            if index !='Temp':\n",
    "                x_test[index]=testDf[index]\n",
    "x_test=np.column_stack((x_test,np.ones(len(x_test))))\n",
    "y_hat_test=np.dot(x_test,est1)\n",
    "y_test=testDf.get(\"Temp\").values\n",
    "rsquared_test=rsquared(x_test,y_test,y_hat_test)\n",
    "rmse_test_1=RMSE(y_test,y_hat_test)\n",
    "rsquared_test_adjusted=adjust_rsquared(x_test,y_test,y_hat_test)\n",
    "print('RMSE for testing data in closed_form_1 =',rmse_test_1)\n",
    "print('R-square for testing data in closed_form_1 =',rsquared_test)\n",
    "print('adjusted R-square for testing data in closed_form_1 =',rsquared_test_adjusted)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Which variables are significant in the model?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "variable MEI     pvalue 4.898889449110617e-20\n",
      "variable CO2     pvalue 0.005052520444472754\n",
      "variable CH4     pvalue 0.8101455584958187\n",
      "this variable CH4 is not siginificant and the corresponding p_value is 0.40507277924790935\n",
      "variable N2O     pvalue 0.05466931069768871\n",
      "this variable N2O is not siginificant and the corresponding p_value is 0.027334655348844356\n",
      "variable CFC-11     pvalue 5.957287397339502e-05\n",
      "variable CFC-12     pvalue 0.00020971989269902503\n",
      "variable TSI     pvalue 1.0959443389123685e-09\n",
      "variable Aerosols     pvalue 5.41127286898885e-12\n"
     ]
    }
   ],
   "source": [
    "#computing t_statistic fot testing significance\n",
    "def t_statistic(x,est,y_true,y_pre):\n",
    "    err=y_true-y_pre\n",
    "    m = np.dot(np.transpose(x), x)\n",
    "    n=np.linalg.inv(m)\n",
    "    err_sqr=np.dot(np.transpose(err), err)\n",
    "    t=np.zeros(len(est))\n",
    "    for j in range(0,len(est)):\n",
    "        k=math.sqrt(n[j,j]*err_sqr/(len(x)-len(est)))\n",
    "        t[j]=est[j]/k\n",
    "    return t\n",
    "t_est1=t_statistic(x_train,est1,y_train,y_hat)\n",
    "def t_test(x,x_data,est,t_est,alpha):\n",
    "    for i in range(0,len(t_est)-1):\n",
    "        p=stats.t.sf(abs(t_est[i]),len(x_data)-len(est))\n",
    "        print('variable',x.columns[i],'    pvalue',2*p)\n",
    "        if 2*p>alpha:\n",
    "            print('this variable',x.columns[i],'is not siginificant and the corresponding p_value is',p)\n",
    "t_test(x,x_train,est1,t_est1,0.05)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.Write down the necessary conditions for using the closed form solution. And you can apply it to the dataset climate_change_2.csv, explain the solution is unreasonable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    VIF Factor  features\n",
      "0          1.2       MEI\n",
      "1         28.0       CO2\n",
      "2   41315369.2       CH4\n",
      "3         61.0       N2O\n",
      "4         31.8    CFC-11\n",
      "5         93.5    CFC-12\n",
      "6          1.1       TSI\n",
      "7          1.4  Aerosols\n",
      "8  101768753.7        NO\n"
     ]
    }
   ],
   "source": [
    "#problem_1_Ôºà4Ôºâ\n",
    "#Ôºà1Ôºâexplaning variable is predtermined variable, not random variable\n",
    "#Ôºà2ÔºâRandom error is satisfied with Ôºàmean=0,variances arenot seriesly correlatedÔºâ\n",
    "#Ôºà3ÔºâRandom error and explaning variables are independent with each other\n",
    "#Ôºà4ÔºâRandom error follows with normal distribution Ôºà0ÔºåsigmaÔºâÔºåand have homogeneous variance\n",
    "data2=pd.read_csv(\"climate_change_2.csv\")\n",
    "exam2Df=DataFrame(data2)\n",
    "x_2=DataFrame()\n",
    "for index in exam2Df.columns:\n",
    "    if index !='Year':\n",
    "        if index !='Month':\n",
    "            if index !='Temp':\n",
    "                x_2[index]=exam2Df[index]\n",
    "x_train_2=np.column_stack((x_2,np.ones(len(x_2))))\n",
    "y_train_2=exam2Df.get(\"Temp\")\n",
    "y_train_2=y_train_2.values\n",
    "est2=closed_form_1(x_train_2,y_train_2)\n",
    "y_hat_2=np.dot(x_train_2,est2)\n",
    "#calculating VIF\n",
    "vif = pd.DataFrame()\n",
    "vif[\"VIF Factor\"] = [variance_inflation_factor(x_2.values, i) for i in range(x_2.shape[1])]\n",
    "vif[\"features\"] = x_2.columns\n",
    "print(vif.round(1))\n",
    "#The smallest eigenvalue is 2.47e-28. This might indicate that there are strong multicollinearity problems or that the design matrix is singular."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=#0099ff size=3 face=\"Èªë‰Ωì\">Problem 2 ‚Äî Regularization</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Please write down the loss function for linear model with L1 regularization, L2 regularization, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The smallest eigenvalue is 2.47e-28. This might indicate that there are strong multicollinearity problems or that the design matrix is singular.\n",
    "#Regularization\n",
    "#L1Ê≠£ÂàôÂåñ L2Ê≠£ÂàôÂåñÁöÑPython ÂÆûÁé∞https://blog.csdn.net/xingzhe2001/article/details/86317266\n",
    "def L1Norm(l,theta):\n",
    "    return  np.dot(np.abs(theta), np.ones(theta.size)) * l\n",
    "def L2Norm(l, theta):\n",
    "    return  np.dot(theta, theta) * l \n",
    "\n",
    "import math\n",
    "def Jfunction_L1norm(x,y,theta,l):\n",
    "    sum=0\n",
    "    y_pre=np.dot(x,theta)\n",
    "    for i in range(0,len(y)):\n",
    "        err=y[i]-y_pre[i]\n",
    "        sum+=np.dot(err,err)\n",
    "    sum += Regularization.L1Norm(l, self.theta)\n",
    "    return sum\n",
    "\n",
    "def Jfunction_L2norm(x,y,theta,l):\n",
    "    sum=0\n",
    "    y_pre=np.dot(x,theta)\n",
    "    for i in range(0,len(y)):\n",
    "        err=y[i]-y_pre[i]\n",
    "        sum+=np.dot(err,err)\n",
    "    sum += Regularization.L2Norm(l, self.theta)\n",
    "    return sum"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. The closed form solution for linear model with L2 regularization:\n",
    "                         ùõâ = (ùêóùêìùêó + ùõåùêà)‚àíùüèùêóùêìùêò\n",
    "where I is the identity matrix. Write a function closed_form_2 that computes this closed form solution given the features X, labels Y and the regularization parameter Œª (using Python or Matlab)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RMSE for training data in closed_form_2 = 0.09719934159261472\n",
      "R-square for training data in closed_form_2 = 0.6944684109379808\n",
      "RMSE for testing data in closed_form_2 = 0.07644737615468676\n",
      "R-square for testing data in closed_form_2 = 0.22517701571585366\n"
     ]
    }
   ],
   "source": [
    "def closed_form_2(x_add,y,numda):\n",
    "    m = np.dot(np.transpose(x_add), x_add)\n",
    "    identity_matrix=np.identity(int(math.sqrt(m.size)))\n",
    "    n=np.linalg.inv(m+numda*identity_matrix)\n",
    "    return np.dot(np.dot(n, np.transpose(x_add)), y)\n",
    "y_train_4=np.column_stack(y_train).reshape(-1,1)\n",
    "est_closed_2=closed_form_2(x_train,y_train,0.1)\n",
    "y_hat_train_2=np.dot(x_train,est_closed_2)\n",
    "rsquared_train_2=rsquared(x_train,y_train,y_hat_train_2)\n",
    "rmse_train_2=RMSE(y_train,y_hat_train_2)\n",
    "print('RMSE for training data in closed_form_2 =',rmse_train_2)\n",
    "print('R-square for training data in closed_form_2 =',rsquared_train_2)\n",
    "est2_test=closed_form_2(x_test,y_test,0.1)\n",
    "y_hat_test_2=np.dot(x_test,est2_test)\n",
    "rsquared_test_2=rsquared(x_test,y_test,y_hat_test_2)\n",
    "rmse_test_2=RMSE(y_test,y_hat_test_2)\n",
    "print('RMSE for testing data in closed_form_2 =',rmse_test_2)\n",
    "print('R-square for testing data in closed_form_2 =',rsquared_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Compare the two solutions in problem 1 and problem 2 and explain the reason why linear model with L2 regularization is robust. (using climate_change_1.csv)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">RMSE for training data in closed_form_1 = 0.09024652434195392\n",
    "R-square for training data in closed_form_1 = 0.7508932773126747\n",
    "RMSE for testing data in closed_form_1 = 0.09538244356355521\n",
    "R-square for testing data in closed_form_1 = 0.22517701571585366\n",
    "RMSE for training data in closed_form_2 = 0.09719934159261472\n",
    "R-square for training data in closed_form_2 = 0.6944684109379808\n",
    "RMSE for testing data in closed_form_2 = 0.07644737615468676\n",
    "R-square for testing data in closed_form_2 = 0.4666544494482906\n",
    "reason:\n",
    "(1)the difference between R-square(train) and R-square(test) is smaller, which means this model is more robust\n",
    "(2)the difference between RMSE(train) and RMSE(test) is smaller"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.You can change the regularization parameter Œª to get different solutions for \n",
    "this problem. Suppose we set Œª = 10, 1, 0.1, 0.01, 0.001, and please evaluate \n",
    "the model R2 on the training set and the testing set. Finally, please decide the best \n",
    "regularization parameter Œª. (Note that: As a qualified data analyst, you must\n",
    "know how to choose model parameters, please learn about cross validation methods.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "numda=10 R_square for training 0.6746079231585073 \n",
      " numda=1 R_square for training 0.679469211074745 \n",
      " numda=0.1 R_square for training 0.6944684109379808 \n",
      " numda=0.01 R_square for training 0.7116529617147973 \n",
      " numda=0.001 R_square for training 0.714833043270218\n",
      "numda=10 R_square for testing 0.19953303814635345 \n",
      " numda=1 R_square for testing 0.39996972412194715 \n",
      " numda=0.1 R_square for testing 0.4666544494482906 \n",
      " numda=0.01 R_square for testing 0.4748344708544384 \n",
      " numda=0.001 R_square for testing 0.4756734043457543\n",
      "comparing RMSE\n",
      "\n",
      "numda=10 RMSE for training 0.10222572763129364 \n",
      " numda=1 RMSE for training 0.07681772577163001 \n",
      " numda=0.1 RMSE for training 0.09719934159261472 \n",
      " numda=0.01 RMSE for training 0.09646256202222915 \n",
      " numda=0.001 RMSE for training 0.09622420891512314\n",
      "numda=10 RMSE for testing 0.08402277703943023 \n",
      " numda=1 RMSE for testing 0.07681772577163001 \n",
      " numda=0.1 RMSE for testing 0.07644737615468676 \n",
      " numda=0.01 RMSE for testing 0.07643970777715885 \n",
      " numda=0.001 RMSE for testing 0.07641728499983912\n"
     ]
    }
   ],
   "source": [
    "Rmse_loop_train=np.zeros(4)\n",
    "Rmse_loop_test=np.zeros(4)\n",
    "R_sqaure_loop_train=np.zeros(4)\n",
    "R_sqaure_loop_test=np.zeros(4)\n",
    "numda=np.array([10,1,0.01,0.001])\n",
    "for j in range(0,4):\n",
    "    est_loop_train=closed_form_2(x_train,y_train,numda[j])\n",
    "    y_hat_train_3=np.dot(x_train,est_loop_train)\n",
    "    R_sqaure_loop_train[j]=rsquared(x_train,y_train,y_hat_train_3)\n",
    "    Rmse_loop_train[j]=RMSE(y_train,y_hat_train_3)\n",
    "    est_loop_test=closed_form_2(x_test,y_test,numda[j])\n",
    "    y_hat_test_3=np.dot(x_test,est_loop_test)\n",
    "    R_sqaure_loop_test[j]=rsquared(x_test,y_test,y_hat_test_3)\n",
    "    Rmse_loop_test[j]=RMSE(y_test,y_hat_test_3)\n",
    "print('numda=10 R_square for training',R_sqaure_loop_train[0],'\\n',\n",
    "     'numda=1 R_square for training',R_sqaure_loop_train[1],'\\n',\n",
    "      'numda=0.1 R_square for training',rsquared_train_2,'\\n',\n",
    "     'numda=0.01 R_square for training',R_sqaure_loop_train[2],'\\n',\n",
    "     'numda=0.001 R_square for training',R_sqaure_loop_train[3])\n",
    "print('numda=10 R_square for testing',R_sqaure_loop_test[0],'\\n',\n",
    "     'numda=1 R_square for testing',R_sqaure_loop_test[1],'\\n',\n",
    "      'numda=0.1 R_square for testing',rsquared_test_2,'\\n',\n",
    "     'numda=0.01 R_square for testing',R_sqaure_loop_test[2],'\\n',\n",
    "     'numda=0.001 R_square for testing',R_sqaure_loop_test[3])\n",
    "print('comparing RMSE\\n')\n",
    "print('numda=10 RMSE for training',Rmse_loop_train[0],'\\n',\n",
    "     'numda=1 RMSE for training',Rmse_loop_test[1],'\\n',\n",
    "      'numda=0.1 RMSE for training',rmse_train_2,'\\n',\n",
    "     'numda=0.01 RMSE for training',Rmse_loop_train[2],'\\n',\n",
    "     'numda=0.001 RMSE for training',Rmse_loop_train[3])\n",
    "print('numda=10 RMSE for testing',Rmse_loop_test[0],'\\n',\n",
    "     'numda=1 RMSE for testing',Rmse_loop_test[1],'\\n',\n",
    "      'numda=0.1 RMSE for testing',rmse_test_2,'\\n',\n",
    "     'numda=0.01 RMSE for testing',Rmse_loop_test[2],'\\n',\n",
    "     'numda=0.001 RMSE for testing',Rmse_loop_test[3])\n",
    "#pythonÂ¶Ç‰ΩïËøõË°åcross validation,https://www.cnblogs.com/lutingting/p/5156475.html\n",
    "#considering both RMSE and R-square, Œª=0.001is the best"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=#0099ff size=3 face=\"Èªë‰Ωì\">Problem 3 ‚Äî Feature Selection</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.From Problem 1, you can know which variables are significant, therefore you\n",
    "can use less variables to train model. For example, remove highly correlated\n",
    "and redundant features. You can propose a workflow to select feature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               MEI       CO2    CFC-11    CFC-12       TSI  Aerosols\n",
      "MEI       1.000000 -0.041147  0.069000  0.008286 -0.154492  0.340238\n",
      "CO2      -0.041147  1.000000  0.514060  0.852690  0.177429 -0.356155\n",
      "CFC-11    0.069000  0.514060  1.000000  0.868985  0.272046 -0.043921\n",
      "CFC-12    0.008286  0.852690  0.868985  1.000000  0.255303 -0.225131\n",
      "TSI      -0.154492  0.177429  0.272046  0.255303  1.000000  0.052117\n",
      "Aerosols  0.340238 -0.356155 -0.043921 -0.225131  0.052117  1.000000\n",
      "               MEI       CO2       CH4       N2O    CFC-11    CFC-12  \\\n",
      "MEI       1.000000 -0.041147 -0.033419 -0.050820  0.069000  0.008286   \n",
      "CO2      -0.041147  1.000000  0.877280  0.976720  0.514060  0.852690   \n",
      "CH4      -0.033419  0.877280  1.000000  0.899839  0.779904  0.963616   \n",
      "N2O      -0.050820  0.976720  0.899839  1.000000  0.522477  0.867931   \n",
      "CFC-11    0.069000  0.514060  0.779904  0.522477  1.000000  0.868985   \n",
      "CFC-12    0.008286  0.852690  0.963616  0.867931  0.868985  1.000000   \n",
      "TSI      -0.154492  0.177429  0.245528  0.199757  0.272046  0.255303   \n",
      "Aerosols  0.340238 -0.356155 -0.267809 -0.337055 -0.043921 -0.225131   \n",
      "\n",
      "               TSI  Aerosols  \n",
      "MEI      -0.154492  0.340238  \n",
      "CO2       0.177429 -0.356155  \n",
      "CH4       0.245528 -0.267809  \n",
      "N2O       0.199757 -0.337055  \n",
      "CFC-11    0.272046 -0.043921  \n",
      "CFC-12    0.255303 -0.225131  \n",
      "TSI       1.000000  0.052117  \n",
      "Aerosols  0.052117  1.000000  \n",
      "Add  CO2                            with p-value 1.74154e-61\n",
      "Add  MEI                            with p-value 8.89027e-09\n",
      "Add  Aerosols                       with p-value 6.74559e-09\n",
      "Add  TSI                            with p-value 2.17418e-08\n",
      "resulting features:\n",
      "24\n",
      "RMSE for testing data after feature selection is = 0.12085213510927582\n",
      "R-square for testing data after feature selection is = 0.6328867915529033\n",
      "Adjust R-square for testing data after feature selection is = 0.4370930803811184\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import sys\n",
    "import re\n",
    "import pylab\n",
    "import numpy as np\n",
    "from patsy import dmatrices\n",
    "from scipy import stats\n",
    "from numpy.linalg import inv\n",
    "from numpy import dot\n",
    "from pylab import figure, show, legend\n",
    "from mpl_toolkits.axes_grid1 import host_subplot\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "data=pd.read_csv(\"climate_change_1.csv\")\n",
    "data_train=data[data['Year']<2007]\n",
    "data_test=data[data['Year']>2006] \n",
    "from pandas import DataFrame, Series\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression as lg\n",
    "from sklearn.model_selection import train_test_split\n",
    "examDf=DataFrame(data_train)\n",
    "from scipy.optimize import leastsq\n",
    "testDf=DataFrame(data_test)\n",
    "import math\n",
    "x3=DataFrame()\n",
    "for index in examDf.columns:\n",
    "    if index !='Year':\n",
    "        if index !='Month':\n",
    "            if index !='Temp':\n",
    "                x3[index]=examDf[index]\n",
    "x3.drop(['CH4','N2O'],axis=1,inplace=True)\n",
    "#based on the result from correlation calculated of x and previous variance inflation factor, we drop N2O and CH4 first,\n",
    "#because of their strong colinearity\n",
    "print(x3.corr())\n",
    "print(x.corr())\n",
    "x_train=np.column_stack((x,np.ones(len(x))))\n",
    "y=examDf.get(\"Temp\")\n",
    "y_train=examDf.get(\"Temp\")\n",
    "y_train=y_train.values\n",
    "constant={'constant':np.ones(len(x))}\n",
    "constant=pd.DataFrame(constant)\n",
    "def rsquared(x,y,yhat): \n",
    "    ybar=np.mean(y)\n",
    "    ssreg=0\n",
    "    sstot=0\n",
    "    for i in range(0,len(x)):\n",
    "        ssreg+=(yhat[i] -ybar)**2\n",
    "        sstot+=(y[i]- ybar)**2\n",
    "    return ssreg/sstot\n",
    "def adjust_rsquared(x,y,yhat): \n",
    "    ybar=np.mean(y)\n",
    "    ssreg=0\n",
    "    sstot=0\n",
    "    for i in range(0,len(x)):\n",
    "        ssreg+=(yhat[i] -ybar)**2\n",
    "        sstot+=(y[i]- ybar)**2\n",
    "    R_square=ssreg/sstot\n",
    "    print(len(x))\n",
    "    R_adjusted_square=1-(1-R_square)*(len(x)-1)/(len(x)-x.shape[1]-1)\n",
    "    return R_adjusted_square\n",
    "def stepwise_selection(X, y,\n",
    "                       initial_list=[],\n",
    "                       threshold_in=0.05,\n",
    "                       threshold_out = 0.1,\n",
    "                       verbose = True):\n",
    "    \"\"\" Perform a forward-backward feature selection\n",
    "    based on p-value from statsmodels.api.OLS\n",
    "    Arguments:\n",
    "        X - pandas.DataFrame with candidate features\n",
    "        y - list-like with the target\n",
    "        initial_list - list of features to start with (column names of X)\n",
    "        threshold_in - include a feature if its p-value < threshold_in\n",
    "        threshold_out - exclude a feature if its p-value > threshold_out\n",
    "        verbose - whether to print the sequence of inclusions and exclusions\n",
    "    Returns: list of selected features\n",
    "    Always set threshold_in < threshold_out to avoid infinite looping.\n",
    "    See https://en.wikipedia.org/wiki/Stepwise_regression for the details\n",
    "    \"\"\"\n",
    "    included = list(initial_list)\n",
    "    while True:\n",
    "        changed=False\n",
    "        # forward step\n",
    "        excluded = list(set(X.columns)-set(included))\n",
    "        new_pval = pd.Series(index=excluded)\n",
    "        for new_column in excluded:\n",
    "            model = sm.OLS(y, sm.add_constant(pd.DataFrame(X[included+[new_column]]))).fit()\n",
    "            new_pval[new_column] = model.pvalues[new_column]\n",
    "        best_pval = new_pval.min()\n",
    "        if best_pval < threshold_in:\n",
    "            best_feature = new_pval.argmin()\n",
    "            included.append(best_feature)\n",
    "            changed=True\n",
    "            if verbose:\n",
    "                print('Add  {:30} with p-value {:.6}'.format(best_feature, best_pval))\n",
    " \n",
    "        # backward step\n",
    "        model = sm.OLS(y, sm.add_constant(pd.DataFrame(X[included]))).fit()\n",
    "        # use all coefs except intercept\n",
    "        pvalues = model.pvalues.iloc[1:]\n",
    "        worst_pval = pvalues.max() # null if pvalues is empty\n",
    "        if worst_pval > threshold_out:\n",
    "            changed=True\n",
    "            worst_feature = pvalues.argmax()\n",
    "            included.remove(worst_feature)\n",
    "            if verbose:\n",
    "                print('Drop {:30} with p-value {:.6}'.format(worst_feature, worst_pval))\n",
    "        if not changed:\n",
    "            break\n",
    "    return included\n",
    "\n",
    "result = stepwise_selection(x3,y_train)\n",
    "print('resulting features:')\n",
    "x4=x3.get(result)\n",
    "x_train_3=np.column_stack((x4,np.ones(len(x))))\n",
    "est3=closed_form_1(x_train_3,y_train)\n",
    "x_test=DataFrame()\n",
    "for index in testDf.columns:\n",
    "    if index !='Year':\n",
    "        if index !='Month':\n",
    "            if index !='Temp':\n",
    "                x_test[index]=testDf[index]\n",
    "x_test_3=x_test.get(result)\n",
    "x_test_3=np.column_stack((x_test_3,np.ones(len(x_test))))\n",
    "y_hat_test_3=np.dot(x_test_3,est3)\n",
    "y_test=testDf.get(\"Temp\").values\n",
    "rsquared_test_selection=rsquared(x_test,y_test,y_hat_test_3)\n",
    "rsquared_adjust_test_selection=adjust_rsquared(x_test,y_test,y_hat_test_3)\n",
    "rmse_test_selection=RMSE(y_test,y_hat_test_3)\n",
    "print('RMSE for testing data after feature selection is =',rmse_test_selection)\n",
    "print('R-square for testing data after feature selection is =',rsquared_test_selection)\n",
    "print('Adjust R-square for testing data after feature selection is =',rsquared_adjust_test_selection)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">compared with R-square= 0.22517701571585366 before feature selection, the R-square=0.6328867915529033 after feature selection is better, which means more robust for test data. By calculating the correlation within each variables, we can find that co2 and NO have strong correlation with other variables, so i decide to drop these two variables first.\n",
    "Generally speaking i don't think multicolinearity will affect the robustness of the original model,but comparing the results, we can find that after feature selection, both of the RMSE and R-square have been obviously improved."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">using gradient descent method to test the efficiency of this feature selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.47895222  0.28455605 -0.23418005  0.15910155 -0.1301745 ]]\n",
      "0.012455526527660703\n",
      "(1, 5)\n",
      "5\n",
      "0.026427124732938005\n",
      "9999\n",
      "[0.04778395 0.04265685 0.01299412 0.03665252 0.09790681]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'iterations')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'log loss')"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11da827b8>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(-500, 10000)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x4=x3.get(result)\n",
    "x4=x4.values\n",
    "#normalizing data\n",
    "for i in range(0,4):\n",
    "    x4[:,i]=(x4[:,i]-min(x4[:,i]))/(max(x4[:,i])-min(x4[:,i]))\n",
    "x_train_3=np.column_stack((x4,np.ones(len(x))))\n",
    "y_train_3=np.matrix(y.values).T\n",
    "theta_n=dot(dot(inv(dot(x_train_3.T, x_train_3)), x_train_3.T), y_train_3).T\n",
    "print(theta_n)\n",
    "for i in range(0,len(y_train_3)):\n",
    "    y_train_3[i]=(y_train_3[i]-min(y_train_3))/(max(y_train_3)-min(y_train_3))\n",
    "def costFunc(X,Y,theta):\n",
    "    inner = np.power((X*theta.T)-Y,2)#È¢ÑÊµãÂÄºÂáèÂéªÁúüÂÆûÂÄº\n",
    "    return np.sum(inner)/(2*len(X))#Âπ≥ÊñπÊçüÂ§±ÂáΩÊï∞\n",
    "cost1=costFunc(x_train_3,y_train_3,theta_n)\n",
    "print(cost1)\n",
    "def gradientDescent(X,Y,theta,alpha,iters):\n",
    "    temp = np.mat(np.zeros(theta.shape))#ÊûÑÂª∫Èõ∂ÂÄºÁü©Èòµ\n",
    "    delta=10e-7\n",
    "    cost = np.zeros(iters)#ÊûÑÂª∫iters‰∏™ÁöÑÊï∞ÁªÑ\n",
    "    thetaNums = int(theta.shape[1])#ËÆ°ÁÆóÈúÄË¶ÅÊ±ÇËß£ÁöÑÂèÇÊï∞ÁöÑ‰∏™Êï∞\n",
    "    print(thetaNums)\n",
    "    g_theta=np.zeros(thetaNums)\n",
    "    r=np.zeros((iters,thetaNums))\n",
    "    r_adjust=0\n",
    "    learning_rate=alpha\n",
    "    theta_agg=np.zeros((iters,thetaNums))\n",
    "    for i in range(iters):\n",
    "        error = (X*theta.T-Y)\n",
    "        for j in range(thetaNums):\n",
    "            if i>0:\n",
    "                r[i,j]=g_theta[j]**2\n",
    "                r_adjust=np.sum(r[:,j])\n",
    "                learning_rate=alpha/math.sqrt(r_adjust+delta)\n",
    "            derivativeInner = np.multiply(error,X[:,j])\n",
    "            temp[0,j] = theta[0,j] - (learning_rate*np.sum(derivativeInner)/len(X))\n",
    "            g_theta[j]=g_theta[j]+np.sum(derivativeInner)/len(X)\n",
    "        theta = temp\n",
    "        theta_agg[i,:]=temp\n",
    "        cost[i] = costFunc(X,Y,theta)\n",
    "    return theta,cost,theta_agg\n",
    "theta = np.matrix(np.array([0,0,0,0,0]))\n",
    "print(theta.shape)\n",
    "iters = 10000\n",
    "alpha = 0.001\n",
    "g,cost,theta_agg2=gradientDescent(x_train_3, y_train_3, theta, alpha, iters)\n",
    "cost2=cost.tolist()\n",
    "print(min(cost2))\n",
    "min_index=cost2.index(min(cost2))\n",
    "print(min_index)\n",
    "print(theta_agg2[min_index,:])\n",
    "train_iterations = np.array(range(0,10000))\n",
    "train_loss =cost\n",
    "host = host_subplot(111)\n",
    "plt.subplots_adjust(right=0.8) # ajust the right boundary of the plot window\n",
    "par1 = host.twinx()\n",
    "# set labels\n",
    "host.set_xlabel(\"iterations\")\n",
    "host.set_ylabel(\"log loss\")\n",
    "# plot curves\n",
    "p1, = host.plot(train_iterations, train_loss, label=\"training log loss\")\n",
    "# set location of the legend, \n",
    "# 1->rightup corner, 2->leftup corner, 3->leftdown corner\n",
    "# 4->rightdown corner, 5->rightmid ...\n",
    "host.legend(loc=5)\n",
    "# set label color\n",
    "host.axis[\"left\"].label.set_color(p1.get_color())\n",
    "# set the range of x axis of host and y axis of par1\n",
    "host.set_xlim([-500, 10000])\n",
    "plt.draw()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font color=#0099ff size=3 face=\"Èªë‰Ωì\">Problem 4 ‚Äî Gradient Descent</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">Firs method is to use Adagrad to adjust learning rate for each iteration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 3.71881976e-01  2.56301879e-01  3.30852712e-04 -4.85352034e-01\n",
      "  -6.13724650e-01  7.89842417e-01  2.06587244e-01 -1.93176985e-01\n",
      "   1.16336585e-01]]\n",
      "0.005557257568758165\n",
      "(1, 9)\n",
      "9\n",
      "0.00911425837158209\n",
      "9999\n",
      "[0.04089551 0.04602261 0.06283174 0.04618018 0.07354959 0.07174254\n",
      " 0.03489118 0.01123278 0.09614547]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'iterations')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'log loss')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11dc04320>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(-500, 10000)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_train_4=np.delete(x_train,-1,axis=1)\n",
    "for i in range(0,8):\n",
    "    x_train_4[:,i]=(x_train_4[:,i]-min(x_train_4[:,i]))/(max(x_train_4[:,i])-min(x_train_4[:,i]))\n",
    "x_train_4=np.column_stack((x_train_4,np.ones(len(x_train_4))))\n",
    "y_train_4=np.matrix(y.values).T\n",
    "for i in range(0,len(y_train_4)):\n",
    "    y_train_4[i]=(y_train_4[i]-min(y_train_4))/(max(y_train_4)-min(y_train_4))\n",
    "theta_n=dot(dot(inv(dot(x_train_4.T, x_train_4)), x_train_4.T), y_train_4).T\n",
    "print(theta_n)\n",
    "def costFunc(X,Y,theta):\n",
    "    inner = np.power((X*theta.T)-Y,2)#È¢ÑÊµãÂÄºÂáèÂéªÁúüÂÆûÂÄº\n",
    "    return np.sum(inner)/(2*len(X))#Âπ≥ÊñπÊçüÂ§±ÂáΩÊï∞\n",
    "cost1=costFunc(x_train_4,y_train_4,theta_n)\n",
    "print(cost1)\n",
    "def gradientDescent(X,Y,theta,alpha,iters):\n",
    "    temp = np.mat(np.zeros(theta.shape))#ÊûÑÂª∫Èõ∂ÂÄºÁü©Èòµ\n",
    "    cost = np.zeros(iters)#ÊûÑÂª∫iters‰∏™ÁöÑÊï∞ÁªÑ\n",
    "    thetaNums = int(theta.shape[1])#ËÆ°ÁÆóÈúÄË¶ÅÊ±ÇËß£ÁöÑÂèÇÊï∞ÁöÑ‰∏™Êï∞\n",
    "    print(thetaNums)\n",
    "    delta=10e-7\n",
    "    g_theta=np.zeros(thetaNums)\n",
    "    r=np.zeros((iters,thetaNums))\n",
    "    r_adjust=0\n",
    "    learning_rate=alpha\n",
    "    theta_agg=np.zeros((iters,thetaNums))\n",
    "    for i in range(iters):\n",
    "        error = (X*theta.T-Y)\n",
    "        for j in range(thetaNums):\n",
    "            if i>0:\n",
    "                r[i,j]=g_theta[j]**2\n",
    "                r_adjust=np.sum(r[:,j])\n",
    "                learning_rate=alpha/math.sqrt(r_adjust+delta)\n",
    "            derivativeInner = np.multiply(error,X[:,j])\n",
    "            temp[0,j] = theta[0,j] - (learning_rate*np.sum(derivativeInner)/len(X))\n",
    "            g_theta[j]=g_theta[j]+np.sum(derivativeInner)/len(X)\n",
    "        theta = temp\n",
    "        theta_agg[i,:]=temp\n",
    "        cost[i] = costFunc(X,Y,theta)\n",
    "    return theta,cost,theta_agg\n",
    "theta = np.matrix(np.array([0,0,0,0,0,0,0,0,0]))\n",
    "print(theta.shape)\n",
    "iters = 10000\n",
    "alpha = 0.001\n",
    "g,cost,theta_agg2=gradientDescent(x_train_4, y_train_4, theta, alpha, iters)\n",
    "cost2=cost.tolist()\n",
    "print(min(cost2))\n",
    "min_index=cost2.index(min(cost2))\n",
    "print(min_index)\n",
    "print(theta_agg2[min_index,:])\n",
    "train_iterations = np.array(range(0,10000))\n",
    "train_loss =cost\n",
    "host = host_subplot(111)\n",
    "plt.subplots_adjust(right=0.8) # ajust the right boundary of the plot window\n",
    "par1 = host.twinx()\n",
    "# set labels\n",
    "host.set_xlabel(\"iterations\")\n",
    "host.set_ylabel(\"log loss\")\n",
    "# plot curves\n",
    "p1, = host.plot(train_iterations, train_loss, label=\"training log loss\")\n",
    "# set location of the legend, \n",
    "# 1->rightup corner, 2->leftup corner, 3->leftdown corner\n",
    "# 4->rightdown corner, 5->rightmid ...\n",
    "host.legend(loc=5)\n",
    "# set label color\n",
    "host.axis[\"left\"].label.set_color(p1.get_color())\n",
    "# set the range of x axis of host and y axis of par1\n",
    "host.set_xlim([-500, 10000])\n",
    "plt.draw()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">Second method is to use constant learning rate for each iteration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 3.71881976e-01  2.56301879e-01  3.30852712e-04 -4.85352034e-01\n",
      "  -6.13724650e-01  7.89842417e-01  2.06587244e-01 -1.93176985e-01\n",
      "   1.16336585e-01]]\n",
      "0.005557257568758165\n"
     ]
    }
   ],
   "source": [
    "x_train_4=np.delete(x_train,-1,axis=1)\n",
    "for i in range(0,8):\n",
    "    x_train_4[:,i]=(x_train_4[:,i]-min(x_train_4[:,i]))/(max(x_train_4[:,i])-min(x_train_4[:,i]))\n",
    "x_train_4=np.column_stack((x_train_4,np.ones(len(x_train_4))))\n",
    "y_train_4=np.matrix(y.values).T\n",
    "for i in range(0,len(y_train_4)):\n",
    "    y_train_4[i]=(y_train_4[i]-min(y_train_4))/(max(y_train_4)-min(y_train_4))\n",
    "theta_n=dot(dot(inv(dot(x_train_4.T, x_train_4)), x_train_4.T), y_train_4).T\n",
    "print(theta_n)\n",
    "def costFunc(X,Y,theta):\n",
    "    inner = np.power((X*theta.T)-Y,2)#È¢ÑÊµãÂÄºÂáèÂéªÁúüÂÆûÂÄº\n",
    "    return np.sum(inner)/(2*len(X))#Âπ≥ÊñπÊçüÂ§±ÂáΩÊï∞\n",
    "cost1=costFunc(x_train_4,y_train_4,theta_n)\n",
    "print(cost1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">Above result is obtained from ols closed form"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 9)\n",
      "9\n",
      "0.00905438266277029\n",
      "9598\n",
      "[0.04195388 0.04732362 0.06492825 0.04748865 0.07615332 0.07426075\n",
      " 0.03566539 0.01088736 0.09981856]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'iterations')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'log loss')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11de26ac8>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(-500, 10000)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def gradientDescent(X,Y,theta,alpha,iters):\n",
    "    temp = np.mat(np.zeros(theta.shape))#ÊûÑÂª∫Èõ∂ÂÄºÁü©Èòµ\n",
    "    cost = np.zeros(iters)#ÊûÑÂª∫iters‰∏™ÁöÑÊï∞ÁªÑ\n",
    "    thetaNums = int(theta.shape[1])#ËÆ°ÁÆóÈúÄË¶ÅÊ±ÇËß£ÁöÑÂèÇÊï∞ÁöÑ‰∏™Êï∞\n",
    "    print(thetaNums)\n",
    "    delta=10e-7\n",
    "    theta_agg=np.zeros((iters,thetaNums))\n",
    "    for i in range(iters):\n",
    "        error = (X*theta.T-Y)\n",
    "        if i>10000:\n",
    "            alpha=alpha/5\n",
    "        for j in range(thetaNums):\n",
    "            derivativeInner = np.multiply(error,X[:,j])\n",
    "            temp[0,j] = theta[0,j] - (alpha*np.sum(derivativeInner)/len(X))\n",
    "        theta = temp\n",
    "        theta_agg[i,:]=temp\n",
    "        cost[i] = costFunc(X,Y,theta)\n",
    "    return theta,cost,theta_agg\n",
    "theta = np.matrix(np.array([0,0,0,0,0,0,0,0,0]))\n",
    "print(theta.shape)\n",
    "iters = 10000\n",
    "alpha = 0.0000005\n",
    "g,cost,theta_agg2=gradientDescent(x_train_4, y_train_4, theta, alpha, iters)\n",
    "cost2=cost.tolist()\n",
    "print(min(cost2))\n",
    "min_index=cost2.index(min(cost2))\n",
    "print(min_index)\n",
    "print(theta_agg2[min_index,:])\n",
    "train_iterations = np.array(range(0,10000))\n",
    "train_loss =cost\n",
    "host = host_subplot(111)\n",
    "plt.subplots_adjust(right=0.8) # ajust the right boundary of the plot window\n",
    "par1 = host.twinx()\n",
    "# set labels\n",
    "host.set_xlabel(\"iterations\")\n",
    "host.set_ylabel(\"log loss\")\n",
    "# plot curves\n",
    "p1, = host.plot(train_iterations, train_loss, label=\"training log loss\")\n",
    "# set location of the legend, \n",
    "# 1->rightup corner, 2->leftup corner, 3->leftdown corner\n",
    "# 4->rightdown corner, 5->rightmid ...\n",
    "host.legend(loc=5)\n",
    "# set label color\n",
    "host.axis[\"left\"].label.set_color(p1.get_color())\n",
    "# set the range of x axis of host and y axis of par1\n",
    "host.set_xlim([-500, 10000])\n",
    "plt.draw()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n",
      "0.005557257568758164\n",
      "644\n",
      "[ 3.71881976e-01  2.56301879e-01  3.30852712e-04 -4.85352034e-01\n",
      " -6.13724650e-01  7.89842417e-01  2.06587244e-01 -1.93176985e-01\n",
      "  1.16336585e-01]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'iterations')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'log loss')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x11e42e780>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(-500, 10000)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "iters = 10000\n",
    "alpha = 0.0000005\n",
    "g,cost,theta_agg2=gradientDescent(x_train_4, y_train_4, theta_n, alpha, iters)\n",
    "cost2=cost.tolist()\n",
    "print(min(cost2))\n",
    "min_index=cost2.index(min(cost2))\n",
    "print(min_index)\n",
    "print(theta_agg2[min_index,:])\n",
    "train_iterations = np.array(range(0,10000))\n",
    "train_loss =cost\n",
    "host = host_subplot(111)\n",
    "plt.subplots_adjust(right=0.8) # ajust the right boundary of the plot window\n",
    "par1 = host.twinx()\n",
    "# set labels\n",
    "host.set_xlabel(\"iterations\")\n",
    "host.set_ylabel(\"log loss\")\n",
    "# plot curves\n",
    "p1, = host.plot(train_iterations, train_loss, label=\"training log loss\")\n",
    "# set location of the legend, \n",
    "# 1->rightup corner, 2->leftup corner, 3->leftdown corner\n",
    "# 4->rightdown corner, 5->rightmid ...\n",
    "host.legend(loc=5)\n",
    "# set label color\n",
    "host.axis[\"left\"].label.set_color(p1.get_color())\n",
    "# set the range of x axis of host and y axis of par1\n",
    "host.set_xlim([-500, 10000])\n",
    "plt.draw()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">When i set the inital theta randomly such as all are zero, Compared with the above closed form result i can't get the optimized result. While i used the theta obtained from closed form solution, i can get better result as following show."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">another method for gradient descent, whcih sets limitation of maximum difference between the newst update and the last version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.9029867  0.12921223 0.04880512 ... 0.         0.35781176 0.57307172]\n",
      " [0.81818182 0.11939299 0.02142937 ... 0.00895715 0.36754669 0.52638701]\n",
      " [0.72531066 0.08881946 0.01868058 ... 0.01864739 0.4544204  0.48376184]\n",
      " ...\n",
      " [0.54022237 0.87011828 0.89268484 ... 0.97767166 0.21210518 0.01894452]\n",
      " [0.62742533 0.89288105 0.90889712 ... 0.97773361 0.14697635 0.02232747]\n",
      " [0.5530848  0.92881053 0.92645574 ... 0.97709861 0.1495159  0.02571042]]\n",
      "[[0.09817636]\n",
      " [0.05269101]\n",
      " [0.05201887]\n",
      " [0.06301144]\n",
      " [0.05143401]\n",
      " [0.06671095]\n",
      " [0.07118683]\n",
      " [0.0381582 ]\n",
      " [0.00449281]]\n",
      "the loss is [[0.01765678]]\n"
     ]
    }
   ],
   "source": [
    "x_train_5=np.delete(x_train_4,-1,axis=1)\n",
    "print(x_train_5)\n",
    "import cmath\n",
    "def computecorrelation(x,y):\n",
    "    x_bar=np.mean(x)\n",
    "    y_bar=np.mean(y)\n",
    "    SSR=0\n",
    "    Varx=0\n",
    "    Vary=0\n",
    "    for i in range(0,len(x)):\n",
    "        SSR+=(x[i]-x_bar)*(y[i]-y_bar)\n",
    "        Varx+=(x[i]-x_bar)**2\n",
    "        Vary+=(y[i]-y_bar)**2\n",
    "    SST=cmath.sqrt(Varx*Vary)\n",
    "    return SSR/SST\n",
    "#Â§öÂÖÉÂõûÂΩíÂáΩÊï∞\n",
    "#def MulitiLinear_regressionModel(df):\n",
    "   # '''Multilinear regression model, calculating fit, P-values, confidence intervals etc.'''\n",
    "    # --- >>> START stats <<< ---\n",
    "    # Fit the model\n",
    "    #model = ols(\"y ~ x1 + x2\", df).fit()\n",
    "    # Print the summary\n",
    "   # print((model.summary()))\n",
    "    # --- >>> STOP stats <<< ---\n",
    "   # return model._results.params  # should be array([-4.99754526,  3.00250049, -0.50514907])\n",
    "\n",
    "y_hat_train_2=np.dot(x_train,est_closed_2)\n",
    "rsquared_train_2=rsquared(x_train,y_train,y_hat_train_2)\n",
    "\n",
    "# Ê†πÊçÆÂΩìÂâçÁöÑthetaÊ±ÇYÁöÑ‰º∞ËÆ°ÂÄº\n",
    "# ‰º†ÂÖ•ÁöÑdata_xÁöÑÊúÄÂ∑¶‰æßÂàó‰∏∫ÂÖ®1ÔºåÂç≥ËÆæX_0 = 1\n",
    "def return_Y_estimate(theta_now, data_x):\n",
    "    # Á°Æ‰øùtheta_now‰∏∫ÂàóÂêëÈáè\n",
    "    theta_now = theta_now.reshape(-1, 1)\n",
    "    _Y_estimate = np.dot(data_x, theta_now)\n",
    "\n",
    "    return _Y_estimate\n",
    "\n",
    "# Ê±ÇÂΩìÂâçthetaÁöÑÊ¢ØÂ∫¶\n",
    "# ‰º†ÂÖ•ÁöÑdata_xÁöÑÊúÄÂ∑¶‰æßÂàó‰∏∫ÂÖ®1ÔºåÂç≥ËÆæX_0 = 1\n",
    "def return_dJ(theta_now, data_x, y_true):\n",
    "    y_estimate = return_Y_estimate(theta_now, data_x)\n",
    "    # ÂÖ±Êúâ_NÁªÑÊï∞ÊçÆ\n",
    "    _N = data_x.shape[0]\n",
    "    # Ê±ÇËß£ÁöÑtheta‰∏™Êï∞\n",
    "    _num_of_features = data_x.shape[1]\n",
    "    # ÊûÑÂª∫\n",
    "    _dJ = np.zeros([_num_of_features, 1])\n",
    "    \n",
    "    for i in range(_num_of_features):\n",
    "        _dJ[i, 0] = 2 * np.dot((y_estimate - y_true).T, data_x[:, i]) / _N\n",
    "    \n",
    "    return _dJ\n",
    "\n",
    "# ËÆ°ÁÆóJÁöÑÂÄº\n",
    "# ‰º†ÂÖ•ÁöÑdata_xÁöÑÊúÄÂ∑¶‰æßÂàó‰∏∫ÂÖ®1ÔºåÂç≥ËÆæX_0 = 1\n",
    "def return_J(theta_now, data_x, y_true):\n",
    "    # ÂÖ±ÊúâNÁªÑÊï∞ÊçÆ\n",
    "    N = data_x.shape[0]\n",
    "    temp = y_true - np.dot(data_x, theta_now)\n",
    "    _J = np.dot(temp.T, temp) / N\n",
    "    \n",
    "    return _J\n",
    "\n",
    "#Gradient Descent\n",
    "# Ê¢ØÂ∫¶‰∏ãÈôçÊ≥ïÊ±ÇËß£Á∫øÊÄßÂõûÂΩí\n",
    "# data_xÁöÑ‰∏ÄË°å‰∏∫‰∏ÄÁªÑÊï∞ÊçÆ\n",
    "# data_y‰∏∫ÂàóÂêëÈáèÔºåÊØè‰∏ÄË°åÂØπÂ∫îdata_x‰∏ÄË°åÁöÑËÆ°ÁÆóÁªìÊûú\n",
    "# Â≠¶‰π†ÁéáÈªòËÆ§‰∏∫0.3\n",
    "# ËØØÂ∑ÆÈªòËÆ§‰∏∫1e-8\n",
    "# ÈªòËÆ§ÊúÄÂ§ßËø≠‰ª£Ê¨°Êï∞‰∏∫1e4\n",
    "def gradient_descent2(data_x, data_y, Learning_rate = 0.01, ER = 1e-5, MAX_LOOP = 1000000):\n",
    "    # Ê†∑Êú¨‰∏™Êï∞‰∏∫\n",
    "    _num_of_samples = data_x.shape[0]\n",
    "    # Âú®data_xÁöÑÊúÄÂ∑¶‰æßÊãºÊé•ÂÖ®1Âàó\n",
    "    X_0 = np.ones([_num_of_samples, 1])\n",
    "    new_x = np.column_stack((X_0, data_x))\n",
    "    # Á°Æ‰øùdata_y‰∏∫ÂàóÂêëÈáè\n",
    "    new_y = data_y.reshape(-1, 1)\n",
    "    # Ê±ÇËß£ÁöÑÊú™Áü•ÂÖÉ‰∏™Êï∞‰∏∫\n",
    "    _num_of_features = new_x.shape[1]\n",
    "    # ÂàùÂßãÂåñthetaÂêëÈáè\n",
    "    theta = np.zeros([_num_of_features, 1]) * 0.3\n",
    "    flag = 0  \t# ÂÆö‰πâË∑≥Âá∫Ê†áÂøó‰Ωç\n",
    "    last_J = 0  # Áî®Êù•Â≠òÊîæ‰∏ä‰∏ÄÊ¨°ÁöÑLose FunctionÁöÑÂÄº\n",
    "    ct = 0  \t# Áî®Êù•ËÆ°ÁÆóËø≠‰ª£Ê¨°Êï∞\n",
    "    \n",
    "    while flag == 0 and ct < MAX_LOOP:\n",
    "        last_theta = theta\n",
    "        # Êõ¥Êñ∞theta\n",
    "        gradient =  return_dJ(theta, new_x, new_y)\n",
    "        theta = theta - Learning_rate * gradient\n",
    "        er = abs(return_J(last_theta, new_x, new_y) - return_J(theta, new_x, new_y))\n",
    "        \n",
    "        # ËØØÂ∑ÆËææÂà∞ÈòÄÂÄºÂàôÂà∑Êñ∞Ë∑≥Âá∫Ê†áÂøó‰Ωç\n",
    "        if er < ER :\n",
    "            flag = 1\n",
    "        \n",
    "        # Âè†Âä†Ëø≠‰ª£Ê¨°Êï∞\n",
    "        ct += 1\n",
    "        \n",
    "    return theta,return_J(theta, new_x, new_y)\n",
    "theta_2,cost5=gradient_descent2(x_train_5,y_train_4,Learning_rate = 0.000001, ER = 1e-9, MAX_LOOP = 10000000)\n",
    "print(theta_2)\n",
    "print('the loss is',cost5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
